[{"/Users/liunengkai/project/web/web-gui/src/index.js":"1","/Users/liunengkai/project/web/web-gui/src/App.js":"2","/Users/liunengkai/project/web/web-gui/src/pages/login/index.jsx":"3","/Users/liunengkai/project/web/web-gui/src/pages/layout/v1/backend.jsx":"4","/Users/liunengkai/project/web/web-gui/src/config/menuConfig.js":"5","/Users/liunengkai/project/web/web-gui/src/utils/string.js":"6","/Users/liunengkai/project/web/web-gui/src/utils/memoryUtils.js":"7","/Users/liunengkai/project/web/web-gui/src/utils/storageUtils.js":"8","/Users/liunengkai/project/web/web-gui/src/api/index.js":"9","/Users/liunengkai/project/web/web-gui/src/api/ajax.js":"10","/Users/liunengkai/project/web/web-gui/src/pages/home/index.jsx":"11","/Users/liunengkai/project/web/web-gui/src/pages/logs/index.jsx":"12","/Users/liunengkai/project/web/web-gui/src/utils/window.js":"13","/Users/liunengkai/project/web/web-gui/src/utils/var.js":"14","/Users/liunengkai/project/web/web-gui/src/pages/memo/index.jsx":"15","/Users/liunengkai/project/web/web-gui/src/pages/plan/index.jsx":"16","/Users/liunengkai/project/web/web-gui/src/pages/memo/edit.jsx":"17","/Users/liunengkai/project/web/web-gui/src/pages/plan/edit.jsx":"18","/Users/liunengkai/project/web/web-gui/src/pages/note/index.jsx":"19","/Users/liunengkai/project/web/web-gui/src/pages/statistics/index.jsx":"20"},{"size":829,"mtime":1615816850206,"results":"21","hashOfConfig":"22"},{"size":917,"mtime":1616247034008,"results":"23","hashOfConfig":"22"},{"size":3443,"mtime":1622211079943,"results":"24","hashOfConfig":"22"},{"size":4995,"mtime":1622208946433,"results":"25","hashOfConfig":"22"},{"size":3727,"mtime":1622209077668,"results":"26","hashOfConfig":"22"},{"size":206,"mtime":1614781982000,"results":"27","hashOfConfig":"22"},{"size":124,"mtime":1609250564000,"results":"28","hashOfConfig":"22"},{"size":608,"mtime":1609250564000,"results":"29","hashOfConfig":"22"},{"size":9208,"mtime":1614781982000,"results":"30","hashOfConfig":"22"},{"size":3444,"mtime":1614781982000,"results":"31","hashOfConfig":"22"},{"size":519,"mtime":1618327038396,"results":"32","hashOfConfig":"22"},{"size":11152,"mtime":1620086556704,"results":"33","hashOfConfig":"22"},{"size":621,"mtime":1614781982000,"results":"34","hashOfConfig":"22"},{"size":2553,"mtime":1612703677000,"results":"35","hashOfConfig":"22"},{"size":10251,"mtime":1620096805240,"results":"36","hashOfConfig":"22"},{"size":11789,"mtime":1620110163989,"results":"37","hashOfConfig":"22"},{"size":4959,"mtime":1620088104773,"results":"38","hashOfConfig":"22"},{"size":6334,"mtime":1620110262987,"results":"39","hashOfConfig":"22"},{"size":852,"mtime":1620111695336,"results":"40","hashOfConfig":"22"},{"size":9394,"mtime":1622209760260,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"47ejc9",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/liunengkai/project/web/web-gui/src/index.js",["89"],"/**\n * 入口js\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import storageUtils from './utils/storageUtils'\n// import memoryUtils from './utils/memoryUtils'\nimport {ConfigProvider} from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\n// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale\n//import moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport locale from 'antd/es/locale/zh_CN';\n\n// 读取local中保存user, 保存到内存中\n// const user = storageUtils.getUser();\n// memoryUtils.user = user;\n\n// 国际化设置，设置中文\n// 将App组件标签渲染到index页面的div上\nReactDOM.render(\n    <ConfigProvider locale={zhCN}>\n        <App/>\n    </ConfigProvider>, document.getElementById('root'));",["90","91"],"/Users/liunengkai/project/web/web-gui/src/App.js",[],"/Users/liunengkai/project/web/web-gui/src/pages/login/index.jsx",[],"/Users/liunengkai/project/web/web-gui/src/pages/layout/v1/backend.jsx",["92","93","94","95","96"],"import React, { Component } from 'react';\nimport {HomeOutlined,UserOutlined,MoneyCollectOutlined,ProfileOutlined,NotificationOutlined,FileTextOutlined,ScheduleOutlined,TagOutlined,HistoryOutlined} from '@ant-design/icons';\nimport { Avatar, Badge} from 'antd';\nimport {Redirect, Route, Switch, Link, withRouter} from 'react-router-dom'\nimport moment from 'moment';\nimport './backend.less'\nimport menuConfig from '../../../config/menuConfig.js'\nimport Home from \"../../home\";\nimport Logs from \"../../logs\";\nimport Memo from \"../../memo\";\nimport Plan from \"../../plan\";\nimport Note from \"../../note\";\nimport Statistics from \"../../statistics\"\n/*\n * 文件名：backend.jsx\n * 作者：liunengkai\n * 创建日期：2/8/21 - 9:27 PM\n * 描述：后台模板\n */\n\n// 定义组件（ES6）\nclass Backend extends Component {\n\n  state = {\n    greetText: '好久不见，甚是想念，记得爱护自己！'\n  };\n\n  /**\n   * 根据小时，得到问候词\n   * @return\n   */\n  getGreetText = () => {\n    let hour = moment().format(\"HH\");\n    var greetText = \"好久不见，甚是想念，记得爱护自己！\";\n    if(hour >= 0 && hour < 7){\n      greetText = \"天还没亮，夜猫子，要注意身体哦！\";\n    }else if(hour>=7 && hour<12){\n      greetText = \"上午好！又是元气满满的一天，奥利给！\";\n    }else if(hour >= 12 && hour < 14){\n      greetText = \"中午好！吃完饭记得午休哦！\";\n    }else if(hour >= 14 && hour < 18){\n      greetText = \"下午茶的时间到了，休息一下吧！\";\n    }else if(hour >= 18 && hour < 22){\n      greetText = \"晚上到了，多陪陪家人吧！\";\n    }else if(hour >= 22 && hour < 24){\n      greetText = \"很晚了哦，注意休息呀！\";\n    }\n    this.setState({greetText});\n  };\n\n  /***\n   * 将字符串转换成组件\n   * @param value\n   * @returns {*}\n   */\n  transformComponent = (value) => {\n    switch(value) {\n      case 'HomeOutlined':{\n        return <HomeOutlined/>\n      }\n      case 'UserOutlined':{\n        return <UserOutlined/>\n      }\n      case 'MoneyCollectOutlined':{\n        return <MoneyCollectOutlined/>\n      }\n      case 'ProfileOutlined':{\n        return <ProfileOutlined/>\n      }\n      case 'NotificationOutlined':{\n        return <NotificationOutlined/>\n      }\n      case 'FileTextOutlined':{\n        return <FileTextOutlined/>\n      }\n      case 'ScheduleOutlined':{\n        return <ScheduleOutlined/>\n      }\n      case 'TagOutlined':{\n        return <TagOutlined/>\n      }\n      case 'HistoryOutlined':{\n        return <HistoryOutlined/>\n      }\n      default: {\n        return <UserOutlined/>\n      }\n    }\n  };\n\n  renderMenu = ()=>{\n    const _this = this;\n    const path = _this.props.location.pathname;\n    return menuConfig.map((item, index) => {\n      return  (<div className={item.key===path?'menu-item menu-item-selected':'menu-item'} key={item.key} onClick={()=>this.pageDirect(item.key)}>\n        <div className='menu-icon'>{_this.transformComponent(item.icon)}</div>\n        <div className='menu-name'>{item.title}</div>\n      </div>);\n    })\n  };\n\n  pageDirect = (url) => {\n    // 得到当前请求的路由路径\n    const path = this.props.location.pathname;\n    if (path === url){\n      return\n    }\n    this.props.history.push(url);\n  };\n\n  // 初始化窗口\n  initWindow = () =>{\n    const {ipcRenderer} =  window.electron;\n    ipcRenderer.send('switchMainWindowSize')\n  };\n\n  componentDidMount() {\n    const _this= this;\n    _this.initWindow();\n    _this.getGreetText();\n  }\n\n\n  render() {\n    const {greetText} = this.state;\n    return (\n      <div style={{backgroundImage: `url('${process.env.PUBLIC_URL}/picture/home/animation.svg')`}} className='layout-page'>\n        <div className='menu-area'>\n          <div style={{backgroundImage: `url('${process.env.PUBLIC_URL}/picture/home/user.png')`}} className='user-logo'></div>\n          <div className='greetings-area'>\n            <p className='user-name'>早上好！Pandora</p>\n            <p className='greetings-word'>{greetText}</p>\n            <p className='pre-log'>最后一次操作：2021:03:20 00:00:00 四川省自贡市</p>\n            <p className='today-plan'>今日安排：无</p>\n          </div>\n          <div className='calendar'>\n            <div className='calendar-month'>2021年03月</div>\n            <div className='calendar-day'>23</div>\n          </div>\n          <div className='menu'>\n            {this.renderMenu()}\n          </div>\n        </div>\n        <div className='main-area'>\n          <Switch>\n            <Route path='/backstage/home' component={Home}/>\n            <Route path='/backstage/logs' component={Logs}/>\n            <Route path='/backstage/memo' component={Memo}/>\n            <Route path='/backstage/plan' component={Plan}/>\n            <Route path='/backstage/note' component={Note}/>\n            <Route path='/backstage/statistics' component={Statistics}/>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\n// 对外暴露\nexport default Backend;","/Users/liunengkai/project/web/web-gui/src/config/menuConfig.js",[],"/Users/liunengkai/project/web/web-gui/src/utils/string.js",[],"/Users/liunengkai/project/web/web-gui/src/utils/memoryUtils.js",["97"],"/*\r\n用来在内存保存一些数据的工具模块\r\n */\r\nexport default {\r\n    user: {}, // 保存当前登陆的user\r\n}\r\n","/Users/liunengkai/project/web/web-gui/src/utils/storageUtils.js",["98"],"/*\r\n进行local数据存储管理的工具模块\r\n */\r\nimport store from 'store'\r\n\r\nconst USER_KEY = 'user_key';\r\nexport default {\r\n    /*\r\n    保存user\r\n     */\r\n    saveUser(user) {\r\n        // localStorage.setItem(USER_KEY, JSON.stringify(user))\r\n        store.set(USER_KEY, user)\r\n    },\r\n\r\n    /*\r\n    读取user\r\n     */\r\n    getUser() {\r\n        // return JSON.parse(localStorage.getItem(USER_KEY) || '{}')\r\n        return store.get(USER_KEY) || {}\r\n    },\r\n\r\n    /*\r\n    删除user\r\n     */\r\n    removeUser() {\r\n        // localStorage.removeItem(USER_KEY)\r\n        store.remove(USER_KEY)\r\n    }\r\n}","/Users/liunengkai/project/web/web-gui/src/api/index.js",[],"/Users/liunengkai/project/web/web-gui/src/api/ajax.js",[],"/Users/liunengkai/project/web/web-gui/src/pages/home/index.jsx",[],"/Users/liunengkai/project/web/web-gui/src/pages/logs/index.jsx",[],"/Users/liunengkai/project/web/web-gui/src/utils/window.js",[],"/Users/liunengkai/project/web/web-gui/src/utils/var.js",[],"/Users/liunengkai/project/web/web-gui/src/pages/memo/index.jsx",[],"/Users/liunengkai/project/web/web-gui/src/pages/plan/index.jsx",["99","100","101","102","103","104","105"],"import React, {Component} from 'react';\nimport {Button, Col, DatePicker, Form, Row, Modal, Input, Spin, Popconfirm} from \"antd\";\nimport './index.less'\nimport {getPlanList, createPlan, updatePlan, deletePlan} from \"../../api\";\nimport {openNotificationWithIcon} from \"../../utils/window\";\nimport {LeftOutlined,RightOutlined} from \"@ant-design/icons\";\nimport moment from 'moment';\nimport PlanFrom from \"./edit\";\n\n/*\n * 文件名：index.jsx\n * 作者：liunengkai\n * 创建日期：5/4/21 - 10:47 AM\n * 描述：\n */\n\n// 定义组件（ES6）\nclass Plan extends Component {\n\n    // 创建用来保存ref标识的标签对象的容器\n    planFormRef = React.createRef();\n\n    state = {\n        listLoading: false,\n        datas:[],\n        outhtml:[],\n        filters: {\n            date: \"\"\n        },\n        //编辑界面数据\n        editForm: {\n            id: '',\n            planDate: '',\n            planContent: '',\n        },\n    };\n\n    /**\n     * 获取计划列表数据\n     * @returns {Promise<void>}\n     */\n    getDatas = async () => {\n        let _this = this;\n        let filters = _this.state.filters;\n        let para = {\n            date: filters.date,\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        // 发异步ajax请求, 获取数据\n        const {msg, code, data} = await getPlanList(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            // 表格数据\n            _this.setState({datas: data},function () {\n                _this.rendering()\n            });\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    rendering = () => {\n        let isNowMonth = true;\n        // 判断是否是本月\n        let nowDate = new Date(this.getNowFormatDate());\n        let nowYear = nowDate.getFullYear();//获取年\n        let nowMonth = nowDate.getMonth();//获取月\n        let nowday = nowDate.getDate();//获取天数\n        let localDate = new Date(this.state.filters.date);\n        let localYear = localDate.getFullYear();//获取年\n        let localMonth = localDate.getMonth();//获取月\n        if((nowYear === localYear)&&(nowMonth === localMonth)){\n            isNowMonth = true;\n        } else {\n            isNowMonth = false;\n        }\n        // 在显示时，月份需要从1开始\n        localMonth = localDate.getMonth()+1;//获取月\n        let editDate = localYear + '-' + (localMonth<10?('0'+localMonth):localMonth) + '-';\n        // 开始渲染\n        let outhtml = [];//输出具体的日历\n        let _thisLine = [];//处理的每一行\n        let lineNum = 0;//行号\n        for(let i = 0;i < this.state.datas.length;i++){\n            const item = this.state.datas[i];\n            const cellNum = i % 7;\n            if(cellNum === 0){\n                // 行开始\n                _thisLine = [];\n                lineNum++\n            }\n            if(item.flog === 1){\n                // 需要渲染日历\n                // 判断该天有无安排计划\n                // 处理日期格式\n                const dateKey = editDate + ((item.number<10)?('0'+item.number):item.number);\n                if(item.value === 0){\n                    // 没有安排计划\n                    // 判断当前单元格是否是今天\n                    if(isNowMonth === true && nowday === item.number){\n                        _thisLine.push(<td key={i} onClick={this.clickTD} data-id={item.id} data-key={dateKey} className=\"today\">{item.number}</td>)\n                    }else {\n                        _thisLine.push(<td key={i} onClick={this.clickTD} data-id={item.id} data-key={dateKey}>{item.number}</td>)\n                    }\n                }else{\n                    // 有计划\n                    _thisLine.push(<td key={i} onClick={this.clickTD} className=\"havetoday\" data-id={item.id} data-key={dateKey} data-value={item.value}>{item.number}</td>)\n                }\n            }else{\n                // 显示1号前和月尾的空白单元格\n                _thisLine.push(<td key={i}></td>)\n            }\n            if(cellNum === 6){\n                outhtml.push(<tr key={lineNum}>{_thisLine}</tr>)\n            }\n        }\n        this.setState({\n            outhtml\n        })\n    };\n\n    /**\n     * 获取当前日期\n     * @returns {string}\n     */\n    getNowFormatDate = () => {\n        let date = new Date();\n        let seperator1 = '-';\n        let year = date.getFullYear();\n        let month = date.getMonth() + 1;\n        let strDate = date.getDate();\n        if (month >= 1 && month <= 9) {\n            month = '0' + month\n        }\n        if (strDate >= 0 && strDate <= 9) {\n            strDate = '0' + strDate\n        }\n        let currentdate = year + seperator1 + month + seperator1 + strDate;\n        return currentdate;\n    };\n\n    // 日期选择发生变化\n    onChangeDate = (date, dateString) => {\n        let _this = this;\n        let filters = _this.state.filters;\n        if (dateString === '' || JSON.stringify(dateString) === null || JSON.stringify(dateString) === 'null'){\n            filters.date = this.getNowFormatDate()\n        }else {\n            filters.date = date.format('YYYY-MM-DD');// toString()\n        }\n        _this.setState({\n            filters\n        },function () {\n            _this.getDatas()\n        })\n    }\n\n    /**\n     * 日期加减运算\n     * @param _dateObject\n     * @param x\n     * @returns {string}\n     */\n    getOperationData = (_dateObject,x) => {\n        //运算日期\n        if( _dateObject === null || undefined === _dateObject || _dateObject === ''){\n            _dateObject = new Date();\n        }\n        _dateObject.setMonth(_dateObject.getMonth() + x);\n        let nd = _dateObject.valueOf() ;\n        nd = new Date(nd);\n        let y = nd.getFullYear();\n        let m = nd.getMonth() + 1;\n        let d = nd.getDate();\n        if(m <= 9) m = '0' + m;\n        if(d <= 9) d = '0'+ d;\n        let cdate = y + '-' + m + '-01' ;\n        return cdate;\n    }\n\n    /**\n     * 日期加减事件\n     * @param flog\n     */\n    buttonQuery = (flog) =>{\n        let _this = this;\n        // 通过上一个月，下一个月进行日期查询\n        let filters = _this.state.filters;\n        filters.date = _this.getOperationData(new Date(filters.date),flog);\n        _this.setState({filters},function () {\n            _this.getDatas()\n        })\n    };\n\n    /**\n     * 单击单元格事件\n     * @param e\n     */\n    clickTD = (e) => {\n        const _this = this;\n        // 得到自定义属性\n        // 得到计划的主键，没有计划时为-1\n        let id =  e.currentTarget.getAttribute('data-id');\n        // 得到当天的时间\n        let key =  e.currentTarget.getAttribute('data-key');\n        let {editForm} = _this.state;\n        if (id === -1 || id === '-1'){\n            const format = 'YYYY-MM-DD';\n            const nowDate = moment().format(format);\n            const clickData = moment(key,format);\n            if (moment(clickData).isBefore(nowDate)){\n                // 点击的时间早于当天的时间的，不允许创建计划\n                openNotificationWithIcon(\"warning\", \"提示\", '不能在过去的日期上创建计划');\n                return\n            }\n            // 该天无计划\n            editForm.planDate = key;\n            editForm.planContent = null;\n            editForm.id = null\n        } else {\n            // 该天有计划\n            let value =  e.currentTarget.getAttribute('data-value');\n            editForm.planContent = value;\n            editForm.planDate = key;\n            editForm.id = id;\n        }\n        console.log('this.planFormRef',this.planFormRef);\n        this.planFormRef.handleDisplay(editForm);\n    };\n\n    bindPlanFormRef = (ref) => {\n        this.planFormRef = ref\n    };\n\n    refreshPageFromPlanForm= () =>{\n        this.getDatas();\n    };\n\n    /*\n     * 为第一次render()准备数据\n     * 因为要异步加载数据，所以方法改为async执行\n     */\n    componentDidMount() {\n        let filters = this.state.filters;\n        filters.date = this.getNowFormatDate();\n        this.setState({\n            filters\n        });\n        this.refreshPageFromPlanForm  = this.refreshPageFromPlanForm.bind(this);\n        this.buttonItemLayout = {\n            wrapperCol: {span: 14, offset: 4},\n        };\n        // 加载页面数据\n        this.getDatas();\n    };\n\n\n    render() {\n        const {listLoading} = this.state;\n        const {date} = this.state.filters;\n        let rangeDate;\n        if (date){\n            rangeDate = moment(date);\n        } else{\n            rangeDate = null;\n        }\n        const outhtml = this.state.outhtml;\n        return (\n            <div className=\"plan-page\">\n                <header>\n                    <div className=\"page-name\">日程安排</div>\n                    <div className=\"tools-bar\">\n                        <Col span={24}>\n                            <Form layout=\"inline\">\n                                <Form.Item label=\"计划时间:\">\n                                    <DatePicker value={rangeDate} picker=\"month\" onChange={this.onChangeDate}/>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </div>\n                </header>\n                <section>\n                    <Row>\n                        <Col span={24}>\n                            <div\n                                style={{float: 'left',width: '30%',height: '100%',textAlign: 'left',lineHeight: '45px',cursor: 'pointer'}}>\n                                <span onClick={() => this.buttonQuery(-1)}><LeftOutlined style={{color:'#000'}}/></span>\n                            </div>\n                            <div\n                                style={{float: 'left',width: '40%',height: '100%',textAlign: 'center',lineHeight: '45px',fontSize: '20px',color:'#000'}}>\n                                {date}\n                            </div>\n                            <div\n                                style={{float: 'right',width: '28%',height: '100%',textAlign: 'right',lineHeight: '45px',cursor: 'pointer'}}>\n                                <span onClick={() => this.buttonQuery(+1)}><RightOutlined style={{color:'#000'}}/></span>\n                            </div>\n                        </Col>\n                    </Row>\n                    <PlanFrom onRef={this.bindPlanFormRef.bind(this)} refreshPage={this.refreshPageFromPlanForm}/>\n                    <Row>\n                        <Col span={24}>\n                            {listLoading === true ? <Spin/> :\n                                <table id=\"plantanle\" border=\"1px\" cellPadding=\"0\" cellSpacing=\"0\">\n                                    <thead>\n                                    <tr>\n                                        <td>星期日</td>\n                                        <td>星期一</td>\n                                        <td>星期二</td>\n                                        <td>星期三</td>\n                                        <td>星期四</td>\n                                        <td>星期五</td>\n                                        <td>星期六</td>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {outhtml}\n                                    </tbody>\n                                </table>\n                            }\n                        </Col>\n                    </Row>\n                </section>\n            </div>\n        );\n    }\n}\n\n// 对外暴露\nexport default Plan;","/Users/liunengkai/project/web/web-gui/src/pages/memo/edit.jsx",[],"/Users/liunengkai/project/web/web-gui/src/pages/plan/edit.jsx",["106","107","108","109"],"import React, {Component} from 'react';\nimport {Button, Col, DatePicker, Form, Row, Modal, Input, Spin, Popconfirm} from \"antd\";\nimport {createPlan, deletePlan, updatePlan} from \"../../api\";\nimport {openNotificationWithIcon} from \"../../utils/window\";\n\n/*\n * 文件名：edit.jsx\n * 作者：liunengkai\n * 创建日期：5/4/21 - 11:01 AM\n * 描述：\n */\n\n// 定义组件（ES6）\nclass Edit extends Component {\n\n    formRef = React.createRef();\n\n    state = {\n        plan: {}, // 创建一个没有内容的编辑对象\n        visibleModal:false\n    };\n\n    /**\n     * 显示弹框\n     * @param val\n     */\n    handleDisplay = (val) => {\n        let _this = this;\n        console.log('val',val);\n        _this.setState({\n            plan: val,\n            visibleModal: true\n        },function () {\n            //注意 initialValues 不能被 setState 动态更新，你需要用 setFieldsValue 来更新。\n            if(!val || !val.id){\n                _this.formRef.current.setFieldsValue({'planDate':val.planDate, 'planContent':null});\n            }else{\n                _this.formRef.current.setFieldsValue(val);\n            }\n        });\n    };\n\n    /**\n     * 关闭弹框\n     */\n    handleCancel = () => {\n        this.setState({visibleModal: false});\n    };\n\n    /**\n     * 提交修改\n     */\n    handleSubmitForm = () => {\n        let _this = this;\n        let form = _this.state.plan;\n        _this.formRef.current.validateFields(['planContent']).then( value => {\n            // 通过验证\n            form.planContent = value.planContent;\n            if (form.id === null){\n                // 提交到创建接口\n                _this.sendInsertRequest(form)\n            } else {\n                // 提交到修改接口\n                _this.sendUpdateRequest(form)\n            }\n        })\n    };\n\n    /**\n     * 发送添加请求\n     * @param form\n     * @returns {Promise<void>}\n     */\n    sendInsertRequest = async (form) => {\n        let _this = this;\n        let para = {\n            describe: form.planContent,\n            plandate: form.planDate\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await createPlan(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"创建成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    sendUpdateRequest = async (form) => {\n        let _this = this;\n        let para = {\n            id: form.id,\n            describe:form.planContent,\n            plandate: form.planDate\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await updatePlan(para)\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"修改成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    /**\n     * 删除计划\n     * @param e\n     */\n    handleDeletePlan = async (e) =>{\n        let _this = this;\n        let editForm = _this.state.plan;\n        let para = {\n            id: editForm.id\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await deletePlan(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"删除成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    /*\n     * 为第一次render()准备数据\n     * 因为要异步加载数据，所以方法改为async执行\n     */\n    componentDidMount() {\n        this.formItemLayout = {\n            labelCol: {span: 4},\n            wrapperCol: {span: 14},\n        };\n        // 加载页面数据\n        const _this = this;\n        _this.props.onRef(_this);\n    };\n\n    render() {\n        const {visibleModal, plan} = this.state;\n        return (\n            <Modal\n                title=\"计划安排\"\n                width=\"50%\"\n                visible={visibleModal === true}\n                okText='提交'\n                onOk={this.handleSubmitForm}\n                onCancel={this.handleCancel}>\n                <Form {...this.formItemLayout} ref={this.formRef}>\n                    <Form.Item label=\"计划时间\" name='planDate' {...this.formItemLayout} initialValue={plan.planDate} >\n                        <Input disabled={true}/>\n                    </Form.Item>\n                    <Form.Item label=\"计划内容：\" name='planContent' {...this.formItemLayout} initialValue={plan.planContent} rules={[{required: true, message: '请输入计划内容'},{min: 1, message: '长度在 1 到 50 个字符'}, {max: 50, message: '长度在 1 到 50 个字符'}]}>\n                        <Input.TextArea maxLength={50} showCount autosize={{minRows: 2, maxRows: 4}} placeholder='请输入计划内容'/>\n                    </Form.Item>\n                    {\n                        plan.id &&\n                        <Form.Item {...this.buttonItemLayout}>\n                            <Popconfirm\n                                title=\"您确定要删除该计划?\"\n                                onConfirm={this.handleDeletePlan}\n                                okText=\"确定\"\n                                cancelText=\"取消\"\n                            >\n                                <Button type=\"link\">删除计划</Button>\n                            </Popconfirm>\n                        </Form.Item>\n                    }\n                </Form>\n            </Modal>\n        );\n    }\n}\n\n// 对外暴露\nexport default Edit;","/Users/liunengkai/project/web/web-gui/src/pages/note/index.jsx",[],"/Users/liunengkai/project/web/web-gui/src/pages/statistics/index.jsx",["110"],{"ruleId":"111","severity":1,"message":"112","line":15,"column":8,"nodeType":"113","messageId":"114","endLine":15,"endColumn":14},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"111","severity":1,"message":"119","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":16},{"ruleId":"111","severity":1,"message":"120","line":3,"column":18,"nodeType":"113","messageId":"114","endLine":3,"endColumn":23},{"ruleId":"111","severity":1,"message":"121","line":4,"column":9,"nodeType":"113","messageId":"114","endLine":4,"endColumn":17},{"ruleId":"111","severity":1,"message":"122","line":4,"column":34,"nodeType":"113","messageId":"114","endLine":4,"endColumn":38},{"ruleId":"111","severity":1,"message":"123","line":4,"column":40,"nodeType":"113","messageId":"114","endLine":4,"endColumn":50},{"ruleId":"124","severity":1,"message":"125","line":4,"column":1,"nodeType":"126","endLine":6,"endColumn":2},{"ruleId":"124","severity":1,"message":"125","line":7,"column":1,"nodeType":"126","endLine":31,"endColumn":2},{"ruleId":"111","severity":1,"message":"127","line":2,"column":9,"nodeType":"113","messageId":"114","endLine":2,"endColumn":15},{"ruleId":"111","severity":1,"message":"128","line":2,"column":45,"nodeType":"113","messageId":"114","endLine":2,"endColumn":50},{"ruleId":"111","severity":1,"message":"129","line":2,"column":52,"nodeType":"113","messageId":"114","endLine":2,"endColumn":57},{"ruleId":"111","severity":1,"message":"130","line":2,"column":65,"nodeType":"113","messageId":"114","endLine":2,"endColumn":75},{"ruleId":"111","severity":1,"message":"131","line":4,"column":22,"nodeType":"113","messageId":"114","endLine":4,"endColumn":32},{"ruleId":"111","severity":1,"message":"132","line":4,"column":34,"nodeType":"113","messageId":"114","endLine":4,"endColumn":44},{"ruleId":"111","severity":1,"message":"133","line":4,"column":46,"nodeType":"113","messageId":"114","endLine":4,"endColumn":56},{"ruleId":"111","severity":1,"message":"134","line":2,"column":17,"nodeType":"113","messageId":"114","endLine":2,"endColumn":20},{"ruleId":"111","severity":1,"message":"135","line":2,"column":22,"nodeType":"113","messageId":"114","endLine":2,"endColumn":32},{"ruleId":"111","severity":1,"message":"136","line":2,"column":40,"nodeType":"113","messageId":"114","endLine":2,"endColumn":43},{"ruleId":"111","severity":1,"message":"137","line":2,"column":59,"nodeType":"113","messageId":"114","endLine":2,"endColumn":63},{"ruleId":"111","severity":1,"message":"136","line":7,"column":17,"nodeType":"113","messageId":"114","endLine":7,"endColumn":20},"no-unused-vars","'locale' is defined but never used.","Identifier","unusedVar","no-native-reassign",["138"],"no-negated-in-lhs",["139"],"'Avatar' is defined but never used.","'Badge' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'withRouter' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Button' is defined but never used.","'Modal' is defined but never used.","'Input' is defined but never used.","'Popconfirm' is defined but never used.","'createPlan' is defined but never used.","'updatePlan' is defined but never used.","'deletePlan' is defined but never used.","'Col' is defined but never used.","'DatePicker' is defined but never used.","'Row' is defined but never used.","'Spin' is defined but never used.","no-global-assign","no-unsafe-negation"]