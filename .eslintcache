[{"/Users/saya/project/web/web-gui/src/index.js":"1","/Users/saya/project/web/web-gui/src/App.js":"2","/Users/saya/project/web/web-gui/src/pages/login/index.jsx":"3","/Users/saya/project/web/web-gui/src/pages/layout/v1/backend.jsx":"4","/Users/saya/project/web/web-gui/src/config/menuConfig.js":"5","/Users/saya/project/web/web-gui/src/utils/string.js":"6","/Users/saya/project/web/web-gui/src/utils/memoryUtils.js":"7","/Users/saya/project/web/web-gui/src/utils/storageUtils.js":"8","/Users/saya/project/web/web-gui/src/api/index.js":"9","/Users/saya/project/web/web-gui/src/pages/memo/index.jsx":"10","/Users/saya/project/web/web-gui/src/pages/logs/index.jsx":"11","/Users/saya/project/web/web-gui/src/pages/plan/index.jsx":"12","/Users/saya/project/web/web-gui/src/pages/statistics/index.jsx":"13","/Users/saya/project/web/web-gui/src/pages/home/index.jsx":"14","/Users/saya/project/web/web-gui/src/pages/note/index.jsx":"15","/Users/saya/project/web/web-gui/src/api/ajax.js":"16","/Users/saya/project/web/web-gui/src/utils/var.js":"17","/Users/saya/project/web/web-gui/src/utils/window.js":"18","/Users/saya/project/web/web-gui/src/pages/memo/edit.jsx":"19","/Users/saya/project/web/web-gui/src/pages/plan/edit.jsx":"20","/Users/saya/project/web/web-gui/src/pages/financial/transaction/index.jsx":"21","/Users/saya/project/web/web-gui/src/pages/financial/transaction/detail.jsx":"22","/Users/saya/project/web/web-gui/src/pages/financial/transaction/renew.jsx":"23","/Users/saya/project/web/web-gui/src/pages/financial/transaction/declare.jsx":"24"},{"size":829,"mtime":1622214741270,"results":"25","hashOfConfig":"26"},{"size":917,"mtime":1622214741270,"results":"27","hashOfConfig":"26"},{"size":3457,"mtime":1622285980770,"results":"28","hashOfConfig":"26"},{"size":5125,"mtime":1629607425615,"results":"29","hashOfConfig":"26"},{"size":3735,"mtime":1629607425611,"results":"30","hashOfConfig":"26"},{"size":206,"mtime":1622214741280,"results":"31","hashOfConfig":"26"},{"size":118,"mtime":1622214741280,"results":"32","hashOfConfig":"26"},{"size":578,"mtime":1622214741280,"results":"33","hashOfConfig":"26"},{"size":9208,"mtime":1622214741270,"results":"34","hashOfConfig":"26"},{"size":10251,"mtime":1622214741280,"results":"35","hashOfConfig":"26"},{"size":11152,"mtime":1622214741280,"results":"36","hashOfConfig":"26"},{"size":11789,"mtime":1622214741280,"results":"37","hashOfConfig":"26"},{"size":9394,"mtime":1622214741280,"results":"38","hashOfConfig":"26"},{"size":519,"mtime":1622214741270,"results":"39","hashOfConfig":"26"},{"size":852,"mtime":1622214741280,"results":"40","hashOfConfig":"26"},{"size":3444,"mtime":1622214741270,"results":"41","hashOfConfig":"26"},{"size":2553,"mtime":1622214741280,"results":"42","hashOfConfig":"26"},{"size":621,"mtime":1622214741280,"results":"43","hashOfConfig":"26"},{"size":4959,"mtime":1622214741280,"results":"44","hashOfConfig":"26"},{"size":6334,"mtime":1622214741280,"results":"45","hashOfConfig":"26"},{"size":18298,"mtime":1629608339528,"results":"46","hashOfConfig":"26"},{"size":6968,"mtime":1613918959460,"results":"47","hashOfConfig":"26"},{"size":22563,"mtime":1613918959519,"results":"48","hashOfConfig":"26"},{"size":14046,"mtime":1613918959500,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"1agj9gn",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"53"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"53"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/saya/project/web/web-gui/src/index.js",["105"],"/**\n * 入口js\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import storageUtils from './utils/storageUtils'\n// import memoryUtils from './utils/memoryUtils'\nimport {ConfigProvider} from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\n// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale\n//import moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport locale from 'antd/es/locale/zh_CN';\n\n// 读取local中保存user, 保存到内存中\n// const user = storageUtils.getUser();\n// memoryUtils.user = user;\n\n// 国际化设置，设置中文\n// 将App组件标签渲染到index页面的div上\nReactDOM.render(\n    <ConfigProvider locale={zhCN}>\n        <App/>\n    </ConfigProvider>, document.getElementById('root'));",["106","107"],"/Users/saya/project/web/web-gui/src/App.js",[],"/Users/saya/project/web/web-gui/src/pages/login/index.jsx",[],"/Users/saya/project/web/web-gui/src/pages/layout/v1/backend.jsx",["108","109","110","111","112"],"/Users/saya/project/web/web-gui/src/config/menuConfig.js",[],"/Users/saya/project/web/web-gui/src/utils/string.js",[],"/Users/saya/project/web/web-gui/src/utils/memoryUtils.js",["113"],"/*\n用来在内存保存一些数据的工具模块\n */\nexport default {\n    user: {}, // 保存当前登陆的user\n}\n","/Users/saya/project/web/web-gui/src/utils/storageUtils.js",["114"],"/*\n进行local数据存储管理的工具模块\n */\nimport store from 'store'\n\nconst USER_KEY = 'user_key';\nexport default {\n    /*\n    保存user\n     */\n    saveUser(user) {\n        // localStorage.setItem(USER_KEY, JSON.stringify(user))\n        store.set(USER_KEY, user)\n    },\n\n    /*\n    读取user\n     */\n    getUser() {\n        // return JSON.parse(localStorage.getItem(USER_KEY) || '{}')\n        return store.get(USER_KEY) || {}\n    },\n\n    /*\n    删除user\n     */\n    removeUser() {\n        // localStorage.removeItem(USER_KEY)\n        store.remove(USER_KEY)\n    }\n}","/Users/saya/project/web/web-gui/src/api/index.js",[],"/Users/saya/project/web/web-gui/src/pages/memo/index.jsx",[],"/Users/saya/project/web/web-gui/src/pages/logs/index.jsx",[],"/Users/saya/project/web/web-gui/src/pages/plan/index.jsx",["115","116","117","118","119","120","121"],"import React, {Component} from 'react';\nimport {Button, Col, DatePicker, Form, Row, Modal, Input, Spin, Popconfirm} from \"antd\";\nimport './index.less'\nimport {getPlanList, createPlan, updatePlan, deletePlan} from \"../../api\";\nimport {openNotificationWithIcon} from \"../../utils/window\";\nimport {LeftOutlined,RightOutlined} from \"@ant-design/icons\";\nimport moment from 'moment';\nimport PlanFrom from \"./edit\";\n\n/*\n * 文件名：index.jsx\n * 作者：liunengkai\n * 创建日期：5/4/21 - 10:47 AM\n * 描述：\n */\n\n// 定义组件（ES6）\nclass Plan extends Component {\n\n    // 创建用来保存ref标识的标签对象的容器\n    planFormRef = React.createRef();\n\n    state = {\n        listLoading: false,\n        datas:[],\n        outhtml:[],\n        filters: {\n            date: \"\"\n        },\n        //编辑界面数据\n        editForm: {\n            id: '',\n            planDate: '',\n            planContent: '',\n        },\n    };\n\n    /**\n     * 获取计划列表数据\n     * @returns {Promise<void>}\n     */\n    getDatas = async () => {\n        let _this = this;\n        let filters = _this.state.filters;\n        let para = {\n            date: filters.date,\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        // 发异步ajax请求, 获取数据\n        const {msg, code, data} = await getPlanList(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            // 表格数据\n            _this.setState({datas: data},function () {\n                _this.rendering()\n            });\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    rendering = () => {\n        let isNowMonth = true;\n        // 判断是否是本月\n        let nowDate = new Date(this.getNowFormatDate());\n        let nowYear = nowDate.getFullYear();//获取年\n        let nowMonth = nowDate.getMonth();//获取月\n        let nowday = nowDate.getDate();//获取天数\n        let localDate = new Date(this.state.filters.date);\n        let localYear = localDate.getFullYear();//获取年\n        let localMonth = localDate.getMonth();//获取月\n        if((nowYear === localYear)&&(nowMonth === localMonth)){\n            isNowMonth = true;\n        } else {\n            isNowMonth = false;\n        }\n        // 在显示时，月份需要从1开始\n        localMonth = localDate.getMonth()+1;//获取月\n        let editDate = localYear + '-' + (localMonth<10?('0'+localMonth):localMonth) + '-';\n        // 开始渲染\n        let outhtml = [];//输出具体的日历\n        let _thisLine = [];//处理的每一行\n        let lineNum = 0;//行号\n        for(let i = 0;i < this.state.datas.length;i++){\n            const item = this.state.datas[i];\n            const cellNum = i % 7;\n            if(cellNum === 0){\n                // 行开始\n                _thisLine = [];\n                lineNum++\n            }\n            if(item.flog === 1){\n                // 需要渲染日历\n                // 判断该天有无安排计划\n                // 处理日期格式\n                const dateKey = editDate + ((item.number<10)?('0'+item.number):item.number);\n                if(item.value === 0){\n                    // 没有安排计划\n                    // 判断当前单元格是否是今天\n                    if(isNowMonth === true && nowday === item.number){\n                        _thisLine.push(<td key={i} onClick={this.clickTD} data-id={item.id} data-key={dateKey} className=\"today\">{item.number}</td>)\n                    }else {\n                        _thisLine.push(<td key={i} onClick={this.clickTD} data-id={item.id} data-key={dateKey}>{item.number}</td>)\n                    }\n                }else{\n                    // 有计划\n                    _thisLine.push(<td key={i} onClick={this.clickTD} className=\"havetoday\" data-id={item.id} data-key={dateKey} data-value={item.value}>{item.number}</td>)\n                }\n            }else{\n                // 显示1号前和月尾的空白单元格\n                _thisLine.push(<td key={i}></td>)\n            }\n            if(cellNum === 6){\n                outhtml.push(<tr key={lineNum}>{_thisLine}</tr>)\n            }\n        }\n        this.setState({\n            outhtml\n        })\n    };\n\n    /**\n     * 获取当前日期\n     * @returns {string}\n     */\n    getNowFormatDate = () => {\n        let date = new Date();\n        let seperator1 = '-';\n        let year = date.getFullYear();\n        let month = date.getMonth() + 1;\n        let strDate = date.getDate();\n        if (month >= 1 && month <= 9) {\n            month = '0' + month\n        }\n        if (strDate >= 0 && strDate <= 9) {\n            strDate = '0' + strDate\n        }\n        let currentdate = year + seperator1 + month + seperator1 + strDate;\n        return currentdate;\n    };\n\n    // 日期选择发生变化\n    onChangeDate = (date, dateString) => {\n        let _this = this;\n        let filters = _this.state.filters;\n        if (dateString === '' || JSON.stringify(dateString) === null || JSON.stringify(dateString) === 'null'){\n            filters.date = this.getNowFormatDate()\n        }else {\n            filters.date = date.format('YYYY-MM-DD');// toString()\n        }\n        _this.setState({\n            filters\n        },function () {\n            _this.getDatas()\n        })\n    }\n\n    /**\n     * 日期加减运算\n     * @param _dateObject\n     * @param x\n     * @returns {string}\n     */\n    getOperationData = (_dateObject,x) => {\n        //运算日期\n        if( _dateObject === null || undefined === _dateObject || _dateObject === ''){\n            _dateObject = new Date();\n        }\n        _dateObject.setMonth(_dateObject.getMonth() + x);\n        let nd = _dateObject.valueOf() ;\n        nd = new Date(nd);\n        let y = nd.getFullYear();\n        let m = nd.getMonth() + 1;\n        let d = nd.getDate();\n        if(m <= 9) m = '0' + m;\n        if(d <= 9) d = '0'+ d;\n        let cdate = y + '-' + m + '-01' ;\n        return cdate;\n    }\n\n    /**\n     * 日期加减事件\n     * @param flog\n     */\n    buttonQuery = (flog) =>{\n        let _this = this;\n        // 通过上一个月，下一个月进行日期查询\n        let filters = _this.state.filters;\n        filters.date = _this.getOperationData(new Date(filters.date),flog);\n        _this.setState({filters},function () {\n            _this.getDatas()\n        })\n    };\n\n    /**\n     * 单击单元格事件\n     * @param e\n     */\n    clickTD = (e) => {\n        const _this = this;\n        // 得到自定义属性\n        // 得到计划的主键，没有计划时为-1\n        let id =  e.currentTarget.getAttribute('data-id');\n        // 得到当天的时间\n        let key =  e.currentTarget.getAttribute('data-key');\n        let {editForm} = _this.state;\n        if (id === -1 || id === '-1'){\n            const format = 'YYYY-MM-DD';\n            const nowDate = moment().format(format);\n            const clickData = moment(key,format);\n            if (moment(clickData).isBefore(nowDate)){\n                // 点击的时间早于当天的时间的，不允许创建计划\n                openNotificationWithIcon(\"warning\", \"提示\", '不能在过去的日期上创建计划');\n                return\n            }\n            // 该天无计划\n            editForm.planDate = key;\n            editForm.planContent = null;\n            editForm.id = null\n        } else {\n            // 该天有计划\n            let value =  e.currentTarget.getAttribute('data-value');\n            editForm.planContent = value;\n            editForm.planDate = key;\n            editForm.id = id;\n        }\n        console.log('this.planFormRef',this.planFormRef);\n        this.planFormRef.handleDisplay(editForm);\n    };\n\n    bindPlanFormRef = (ref) => {\n        this.planFormRef = ref\n    };\n\n    refreshPageFromPlanForm= () =>{\n        this.getDatas();\n    };\n\n    /*\n     * 为第一次render()准备数据\n     * 因为要异步加载数据，所以方法改为async执行\n     */\n    componentDidMount() {\n        let filters = this.state.filters;\n        filters.date = this.getNowFormatDate();\n        this.setState({\n            filters\n        });\n        this.refreshPageFromPlanForm  = this.refreshPageFromPlanForm.bind(this);\n        this.buttonItemLayout = {\n            wrapperCol: {span: 14, offset: 4},\n        };\n        // 加载页面数据\n        this.getDatas();\n    };\n\n\n    render() {\n        const {listLoading} = this.state;\n        const {date} = this.state.filters;\n        let rangeDate;\n        if (date){\n            rangeDate = moment(date);\n        } else{\n            rangeDate = null;\n        }\n        const outhtml = this.state.outhtml;\n        return (\n            <div className=\"plan-page\">\n                <header>\n                    <div className=\"page-name\">日程安排</div>\n                    <div className=\"tools-bar\">\n                        <Col span={24}>\n                            <Form layout=\"inline\">\n                                <Form.Item label=\"计划时间:\">\n                                    <DatePicker value={rangeDate} picker=\"month\" onChange={this.onChangeDate}/>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </div>\n                </header>\n                <section>\n                    <Row>\n                        <Col span={24}>\n                            <div\n                                style={{float: 'left',width: '30%',height: '100%',textAlign: 'left',lineHeight: '45px',cursor: 'pointer'}}>\n                                <span onClick={() => this.buttonQuery(-1)}><LeftOutlined style={{color:'#000'}}/></span>\n                            </div>\n                            <div\n                                style={{float: 'left',width: '40%',height: '100%',textAlign: 'center',lineHeight: '45px',fontSize: '20px',color:'#000'}}>\n                                {date}\n                            </div>\n                            <div\n                                style={{float: 'right',width: '28%',height: '100%',textAlign: 'right',lineHeight: '45px',cursor: 'pointer'}}>\n                                <span onClick={() => this.buttonQuery(+1)}><RightOutlined style={{color:'#000'}}/></span>\n                            </div>\n                        </Col>\n                    </Row>\n                    <PlanFrom onRef={this.bindPlanFormRef.bind(this)} refreshPage={this.refreshPageFromPlanForm}/>\n                    <Row>\n                        <Col span={24}>\n                            {listLoading === true ? <Spin/> :\n                                <table id=\"plantanle\" border=\"1px\" cellPadding=\"0\" cellSpacing=\"0\">\n                                    <thead>\n                                    <tr>\n                                        <td>星期日</td>\n                                        <td>星期一</td>\n                                        <td>星期二</td>\n                                        <td>星期三</td>\n                                        <td>星期四</td>\n                                        <td>星期五</td>\n                                        <td>星期六</td>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {outhtml}\n                                    </tbody>\n                                </table>\n                            }\n                        </Col>\n                    </Row>\n                </section>\n            </div>\n        );\n    }\n}\n\n// 对外暴露\nexport default Plan;","/Users/saya/project/web/web-gui/src/pages/statistics/index.jsx",["122"],"import React, {Component} from 'react';\nimport {totalTransactionForDay, outTransactionForDayExcel} from \"../../api\";\nimport {openNotificationWithIcon} from \"../../utils/window\";\nimport moment from 'moment';\nimport axios from 'axios';\nimport {SearchOutlined, ReloadOutlined, FileExcelOutlined} from '@ant-design/icons';\nimport {Button, Row, DatePicker, Table, Form, Col} from \"antd\";\nimport {disabledDate, formatMoney} from \"../../utils/var\";\n\n/*\n * 文件名：index.jsx\n * 作者：liunengkai\n * 创建日期：5/4/21 - 2:57 PM\n * 描述： 收支汇总 按天\n */\n\nconst {RangePicker} = DatePicker;\n\n// 定义组件（ES6）\nclass Statistics extends Component {\n\n    state = {\n        // 返回的单元格数据\n        datas: [],\n        // 总数据行数\n        dataTotal: 0,\n        // 当前页\n        nowPage: 1,\n        // 页面宽度\n        pageSize: 10,\n        // 是否显示加载\n        listLoading: false,\n        filters: {\n            beginTime: null,// 搜索表单的开始时间\n            endTime: null,// 搜索表单的结束时间\n        },\n    };\n\n    /*\n    * 初始化Table所有列的数组\n    */\n    initColumns = () => {\n        this.columns = [\n            {\n                title: '统计日期',\n                dataIndex: 'tradeDate', // 显示数据对应的属性名\n                align:'center',\n            },\n            {\n                title: '收入(元)',\n                dataIndex: 'deposited', // 显示数据对应的属性名\n                align:'right',\n                render:(value,row) => (formatMoney(row.deposited))\n            },\n            {\n                title: '支出(元)',\n                dataIndex: 'expenditure', // 显示数据对应的属性名\n                align:'right',\n                render:(value,row) => (formatMoney(row.expenditure))\n            },\n            {\n                title: '收支总额(元)',\n                dataIndex: 'currencyNumber', // 显示数据对应的属性名\n                align:'right',\n                render:(value,row) => (formatMoney(row.currencyNumber))\n            }\n        ]\n    };\n\n    /**\n     * 获取页面数据\n     * @returns {Promise<void>}\n     */\n    getDatas = async () => {\n        let _this = this;\n        let para = {\n            beginTime: _this.state.filters.beginTime,\n            endTime: _this.state.filters.endTime,\n            nowPage: this.state.nowPage,\n            pageSize: this.state.pageSize,\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        // 发异步ajax请求, 获取数据\n        const {msg, code, data} = await totalTransactionForDay(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            _this.setState({\n                // 总数据量\n                dataTotal: data.dateSum,\n                // 表格数据\n                datas: data.grid\n            });\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    reloadPage = () => {\n        // 重置查询条件\n        let _this = this;\n        let filters = _this.state.filters;\n        filters.beginTime = null;\n        filters.endTime = null;\n        _this.setState({\n            nowPage: 1,\n            filters: filters\n        }, function () {\n            _this.getDatas()\n        });\n    };\n\n    // 回调函数,改变页宽大小\n    changePageSize = (pageSize, current) => {\n        let _this = this;\n        // react在生命周期和event handler里的setState会被合并（异步）处理,需要在回调里回去获取更新后的 state.\n        _this.setState({\n            nowPage: 1,\n            pageSize: pageSize\n        }, function () {\n            _this.getDatas();\n        });\n    };\n\n    // 回调函数，页面发生跳转\n    changePage = (current) => {\n        let _this = this;\n        _this.setState({\n            nowPage: current,\n        }, function () {\n            _this.getDatas();\n        });\n    };\n\n    // 日期选择发生变化\n    onChangeDate = (date, dateString) => {\n        let _this = this;\n        let {filters} = _this.state;\n        // 为空要单独判断\n        if (dateString[0] !== '' && dateString[1] !== '') {\n            filters.beginTime = dateString[0];\n            filters.endTime = dateString[1];\n        } else {\n            filters.beginTime = null;\n            filters.endTime = null;\n        }\n        _this.setState({\n            nowPage: 1,\n            filters\n        }, function () {\n            _this.getDatas()\n        });\n    };\n\n    /**\n     * 导出财务流水\n     */\n    exportExcel = () =>{\n        let _this = this;\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        let para = {\n            beginTime: this.state.filters.beginTime,\n            endTime: this.state.filters.endTime,\n        };\n        axios({\n            method: \"GET\",\n            url: outTransactionForDayExcel,   //接口地址\n            params: para,           //接口参数\n            responseType: 'blob',\n            //上面这个参数不加会乱码，据说{responseType: 'arraybuffer'}也可以\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        })\n            .then(function (res) {\n                _this.setState({listLoading: false});\n                let fileName = '财务流水日度报表.xlsx';//excel文件名称\n                let blob = new Blob([res.data], {type: 'application/x-xlsx'});   //word文档为msword,pdf文档为pdf，excel文档为x-xls\n                if (window.navigator.msSaveOrOpenBlob) {\n                    navigator.msSaveBlob(blob, fileName);\n                } else {\n                    let link = document.createElement('a');\n                    link.href = window.URL.createObjectURL(blob);\n                    link.download = fileName;\n                    link.click();\n                    window.URL.revokeObjectURL(link.href);\n                }\n            })\n            .catch(function (res) {\n                console.log(res);\n                _this.setState({listLoading: false});\n                openNotificationWithIcon(\"error\", \"错误提示\", \"导出财务流水日度报表失败\");\n            });\n    };\n\n    /*\n    *为第一次render()准备数据\n    * 因为要异步加载数据，所以方法改为async执行\n    */\n    componentDidMount() {\n        // 初始化表格属性设置\n        this.initColumns();\n        // 加载页面数据\n        this.getDatas();\n    };\n\n\n    render() {\n        // 读取状态数据\n        const {datas, dataTotal, nowPage, pageSize, listLoading, filters} = this.state;\n        let {beginTime, endTime} = filters;\n        let rangeDate;\n        if (beginTime !== null && endTime !== null) {\n            rangeDate = [moment(beginTime), moment(endTime)]\n        } else {\n            rangeDate = [null, null]\n        }\n        return (\n            <div className=\"statistics-page\">\n                <header>\n                    <div className=\"page-name\">收支汇总</div>\n                    <div className=\"tools-bar\">\n                        <Col span={24}>\n                            <Form layout=\"inline\">\n                                <Form.Item>\n                                    <RangePicker value={rangeDate} disabledDate={disabledDate} onChange={this.onChangeDate}/>\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"button\" onClick={this.getDatas}>\n                                        <SearchOutlined/>查询\n                                    </Button>\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"button\" onClick={this.reloadPage}>\n                                        <ReloadOutlined/>重置\n                                    </Button>\n                                </Form.Item>\n                                <Form.Item>\n                                    <Button type=\"primary\" htmlType=\"button\" onClick={this.exportExcel}>\n                                        <FileExcelOutlined/>导出\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </div>\n                </header>\n                <section>\n                    <Col span={24} className=\"dataTable\">\n                        <Table size=\"middle\" bordered rowKey='tradeDate' loading={listLoading} columns={this.columns} dataSource={datas}\n                               pagination={{\n                                   current:nowPage,\n                                   showTotal: () => `当前第${nowPage}页 共${dataTotal}条`,\n                                   pageSize: pageSize, showQuickJumper: true, total: dataTotal, showSizeChanger: true,\n                                   onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n                                   onChange: this.changePage,\n                               }}/>\n                    </Col>\n                </section>\n            </div>\n        );\n    }\n}\n\n// 对外暴露\nexport default Statistics;","/Users/saya/project/web/web-gui/src/pages/home/index.jsx",[],"/Users/saya/project/web/web-gui/src/pages/note/index.jsx",[],"/Users/saya/project/web/web-gui/src/api/ajax.js",[],"/Users/saya/project/web/web-gui/src/utils/var.js",[],"/Users/saya/project/web/web-gui/src/utils/window.js",[],"/Users/saya/project/web/web-gui/src/pages/memo/edit.jsx",[],"/Users/saya/project/web/web-gui/src/pages/plan/edit.jsx",["123","124","125","126"],"import React, {Component} from 'react';\nimport {Button, Col, DatePicker, Form, Row, Modal, Input, Spin, Popconfirm} from \"antd\";\nimport {createPlan, deletePlan, updatePlan} from \"../../api\";\nimport {openNotificationWithIcon} from \"../../utils/window\";\n\n/*\n * 文件名：edit.jsx\n * 作者：liunengkai\n * 创建日期：5/4/21 - 11:01 AM\n * 描述：\n */\n\n// 定义组件（ES6）\nclass Edit extends Component {\n\n    formRef = React.createRef();\n\n    state = {\n        plan: {}, // 创建一个没有内容的编辑对象\n        visibleModal:false\n    };\n\n    /**\n     * 显示弹框\n     * @param val\n     */\n    handleDisplay = (val) => {\n        let _this = this;\n        console.log('val',val);\n        _this.setState({\n            plan: val,\n            visibleModal: true\n        },function () {\n            //注意 initialValues 不能被 setState 动态更新，你需要用 setFieldsValue 来更新。\n            if(!val || !val.id){\n                _this.formRef.current.setFieldsValue({'planDate':val.planDate, 'planContent':null});\n            }else{\n                _this.formRef.current.setFieldsValue(val);\n            }\n        });\n    };\n\n    /**\n     * 关闭弹框\n     */\n    handleCancel = () => {\n        this.setState({visibleModal: false});\n    };\n\n    /**\n     * 提交修改\n     */\n    handleSubmitForm = () => {\n        let _this = this;\n        let form = _this.state.plan;\n        _this.formRef.current.validateFields(['planContent']).then( value => {\n            // 通过验证\n            form.planContent = value.planContent;\n            if (form.id === null){\n                // 提交到创建接口\n                _this.sendInsertRequest(form)\n            } else {\n                // 提交到修改接口\n                _this.sendUpdateRequest(form)\n            }\n        })\n    };\n\n    /**\n     * 发送添加请求\n     * @param form\n     * @returns {Promise<void>}\n     */\n    sendInsertRequest = async (form) => {\n        let _this = this;\n        let para = {\n            describe: form.planContent,\n            plandate: form.planDate\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await createPlan(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"创建成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    sendUpdateRequest = async (form) => {\n        let _this = this;\n        let para = {\n            id: form.id,\n            describe:form.planContent,\n            plandate: form.planDate\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await updatePlan(para)\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"修改成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    /**\n     * 删除计划\n     * @param e\n     */\n    handleDeletePlan = async (e) =>{\n        let _this = this;\n        let editForm = _this.state.plan;\n        let para = {\n            id: editForm.id\n        };\n        // 在发请求前, 显示loading\n        _this.setState({listLoading: true});\n        const {msg, code} = await deletePlan(para);\n        // 在请求完成后, 隐藏loading\n        _this.setState({listLoading: false});\n        if (code === 0) {\n            openNotificationWithIcon(\"success\", \"操作结果\", \"删除成功\");\n            _this.handleCancel();\n            _this.formRef.current.resetFields();\n            _this.props.refreshPage();\n        } else {\n            openNotificationWithIcon(\"error\", \"错误提示\", msg);\n        }\n    };\n\n    /*\n     * 为第一次render()准备数据\n     * 因为要异步加载数据，所以方法改为async执行\n     */\n    componentDidMount() {\n        this.formItemLayout = {\n            labelCol: {span: 4},\n            wrapperCol: {span: 14},\n        };\n        // 加载页面数据\n        const _this = this;\n        _this.props.onRef(_this);\n    };\n\n    render() {\n        const {visibleModal, plan} = this.state;\n        return (\n            <Modal\n                title=\"计划安排\"\n                width=\"50%\"\n                visible={visibleModal === true}\n                okText='提交'\n                onOk={this.handleSubmitForm}\n                onCancel={this.handleCancel}>\n                <Form {...this.formItemLayout} ref={this.formRef}>\n                    <Form.Item label=\"计划时间\" name='planDate' {...this.formItemLayout} initialValue={plan.planDate} >\n                        <Input disabled={true}/>\n                    </Form.Item>\n                    <Form.Item label=\"计划内容：\" name='planContent' {...this.formItemLayout} initialValue={plan.planContent} rules={[{required: true, message: '请输入计划内容'},{min: 1, message: '长度在 1 到 50 个字符'}, {max: 50, message: '长度在 1 到 50 个字符'}]}>\n                        <Input.TextArea maxLength={50} showCount autosize={{minRows: 2, maxRows: 4}} placeholder='请输入计划内容'/>\n                    </Form.Item>\n                    {\n                        plan.id &&\n                        <Form.Item {...this.buttonItemLayout}>\n                            <Popconfirm\n                                title=\"您确定要删除该计划?\"\n                                onConfirm={this.handleDeletePlan}\n                                okText=\"确定\"\n                                cancelText=\"取消\"\n                            >\n                                <Button type=\"link\">删除计划</Button>\n                            </Popconfirm>\n                        </Form.Item>\n                    }\n                </Form>\n            </Modal>\n        );\n    }\n}\n\n// 对外暴露\nexport default Edit;","/Users/saya/project/web/web-gui/src/pages/financial/transaction/index.jsx",[],"/Users/saya/project/web/web-gui/src/pages/financial/transaction/detail.jsx",[],"/Users/saya/project/web/web-gui/src/pages/financial/transaction/renew.jsx",[],"/Users/saya/project/web/web-gui/src/pages/financial/transaction/declare.jsx",[],{"ruleId":"127","severity":1,"message":"128","line":15,"column":8,"nodeType":"129","messageId":"130","endLine":15,"endColumn":14},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"127","severity":1,"message":"135","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":16},{"ruleId":"127","severity":1,"message":"136","line":3,"column":18,"nodeType":"129","messageId":"130","endLine":3,"endColumn":23},{"ruleId":"127","severity":1,"message":"137","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":17},{"ruleId":"127","severity":1,"message":"138","line":4,"column":34,"nodeType":"129","messageId":"130","endLine":4,"endColumn":38},{"ruleId":"127","severity":1,"message":"139","line":4,"column":40,"nodeType":"129","messageId":"130","endLine":4,"endColumn":50},{"ruleId":"140","severity":1,"message":"141","line":4,"column":1,"nodeType":"142","endLine":6,"endColumn":2},{"ruleId":"140","severity":1,"message":"141","line":7,"column":1,"nodeType":"142","endLine":31,"endColumn":2},{"ruleId":"127","severity":1,"message":"143","line":2,"column":9,"nodeType":"129","messageId":"130","endLine":2,"endColumn":15},{"ruleId":"127","severity":1,"message":"144","line":2,"column":45,"nodeType":"129","messageId":"130","endLine":2,"endColumn":50},{"ruleId":"127","severity":1,"message":"145","line":2,"column":52,"nodeType":"129","messageId":"130","endLine":2,"endColumn":57},{"ruleId":"127","severity":1,"message":"146","line":2,"column":65,"nodeType":"129","messageId":"130","endLine":2,"endColumn":75},{"ruleId":"127","severity":1,"message":"147","line":4,"column":22,"nodeType":"129","messageId":"130","endLine":4,"endColumn":32},{"ruleId":"127","severity":1,"message":"148","line":4,"column":34,"nodeType":"129","messageId":"130","endLine":4,"endColumn":44},{"ruleId":"127","severity":1,"message":"149","line":4,"column":46,"nodeType":"129","messageId":"130","endLine":4,"endColumn":56},{"ruleId":"127","severity":1,"message":"150","line":7,"column":17,"nodeType":"129","messageId":"130","endLine":7,"endColumn":20},{"ruleId":"127","severity":1,"message":"151","line":2,"column":17,"nodeType":"129","messageId":"130","endLine":2,"endColumn":20},{"ruleId":"127","severity":1,"message":"152","line":2,"column":22,"nodeType":"129","messageId":"130","endLine":2,"endColumn":32},{"ruleId":"127","severity":1,"message":"150","line":2,"column":40,"nodeType":"129","messageId":"130","endLine":2,"endColumn":43},{"ruleId":"127","severity":1,"message":"153","line":2,"column":59,"nodeType":"129","messageId":"130","endLine":2,"endColumn":63},"no-unused-vars","'locale' is defined but never used.","Identifier","unusedVar","no-native-reassign",["154"],"no-negated-in-lhs",["155"],"'Avatar' is defined but never used.","'Badge' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'withRouter' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Button' is defined but never used.","'Modal' is defined but never used.","'Input' is defined but never used.","'Popconfirm' is defined but never used.","'createPlan' is defined but never used.","'updatePlan' is defined but never used.","'deletePlan' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'DatePicker' is defined but never used.","'Spin' is defined but never used.","no-global-assign","no-unsafe-negation"]